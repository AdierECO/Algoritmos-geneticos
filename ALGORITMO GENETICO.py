# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J4sEJpBxAkh8j0K8WfSo42o_0FImpv1X
"""

#@title üß¨ Algoritmo Gen√©tico interactivo
import random
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display, clear_output

# Funciones b√°sicas del algoritmo
def fitness(x):
    return x ** 2

def decode(chromosome):
    return int(chromosome, 2)

def create_individual(bit_length):
    return ''.join(random.choice('01') for _ in range(bit_length))

def crossover(p1, p2, prob, bit_length):
    if random.random() < prob:
        point = random.randint(1, bit_length - 1)
        return p1[:point] + p2[point:], p2[:point] + p1[point:]
    return p1, p2

def mutate(chromosome, prob):
    return ''.join('1' if bit == '0' else '0' if random.random() < prob else bit for bit in chromosome)

def tournament_selection(population):
    i1, i2 = random.sample(population, 2)
    return i1 if fitness(decode(i1)) > fitness(decode(i2)) else i2

def run_genetic_algorithm(bit_length, pop_size, generations, crossover_prob, mutation_prob):
    population = [create_individual(bit_length) for _ in range(pop_size)]
    best_scores = []

    for _ in range(generations):
        decoded = [decode(ind) for ind in population]
        scores = [fitness(x) for x in decoded]
        best_scores.append(max(scores))

        new_population = []
        while len(new_population) < pop_size:
            p1 = tournament_selection(population)
            p2 = tournament_selection(population)
            child1, child2 = crossover(p1, p2, crossover_prob, bit_length)
            new_population.extend([
                mutate(child1, mutation_prob),
                mutate(child2, mutation_prob)
            ])
        population = new_population[:pop_size]

    return best_scores

# Widgets interactivos
bit_length_slider = widgets.IntSlider(value=6, min=4, max=10, step=1, description='Bits (x):')
pop_size_slider = widgets.IntSlider(value=10, min=4, max=100, step=2, description='Poblaci√≥n:')
generations_slider = widgets.IntSlider(value=30, min=5, max=100, step=5, description='Generaciones:')
crossover_slider = widgets.FloatSlider(value=0.7, min=0.0, max=1.0, step=0.05, description='Cruce:')
mutation_slider = widgets.FloatSlider(value=0.1, min=0.0, max=1.0, step=0.01, description='Mutaci√≥n:')

run_button = widgets.Button(description="‚ñ∂ Ejecutar")

output = widgets.Output()

def on_run_button_clicked(b):
    with output:
        clear_output(wait=True)
        best_scores = run_genetic_algorithm(
            bit_length_slider.value,
            pop_size_slider.value,
            generations_slider.value,
            crossover_slider.value,
            mutation_slider.value
        )

        plt.figure(figsize=(10, 4))
        plt.plot(best_scores, marker='o', color='blue')
        plt.title("Evoluci√≥n del mejor individuo por generaci√≥n")
        plt.xlabel("Generaci√≥n")
        plt.ylabel("Mejor valor de f(x) = x¬≤")
        plt.grid(True)
        plt.show()

run_button.on_click(on_run_button_clicked)

# Mostrar controles
display(widgets.VBox([
    bit_length_slider,
    pop_size_slider,
    generations_slider,
    crossover_slider,
    mutation_slider,
    run_button,
    output
]))